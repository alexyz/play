package as.play;

import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.StringReader;
import java.util.*;

import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileFilter;

import as.play.af.AFEngine;

import static as.play.SwingUtil.*;

import java.awt.Color;

public class ConvertDialog extends JDialog {
	
	public static void main (String[] args) throws Exception {
		UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
		ConvertDialog d = new ConvertDialog();
		d.init(new AFEngine());
		border(d.getContentPane());
		d.setModalityType(ModalityType.APPLICATION_MODAL);
		d.setVisible(true);
		System.exit(0);
	}
	
	private final JTextArea area = new JTextArea();
	private final JComboBox<String> formatCombo = new JComboBox<>();
	private final JComboBox<String> rateCombo = new JComboBox<>();
	private final JCheckBox mergeBox = new JCheckBox("Merge");
	private final JTextField dirField = new JTextField();
	private final JScrollPane areaScroller = new JScrollPane(area);
	private Engine engine;
	private File dir;
	
	public ConvertDialog () {
		setTitle(getClass().getSimpleName());
		
		areaScroller.setBorder(new TitledBorder("Input Files"));
		formatCombo.addItemListener(e -> updaterates());
		
		int x = 0;
		JPanel dirpanel = new JPanel(new GridBagLayout());
		dirpanel.add(dirField, gbc().pos(x++,1).weightX().fillHorizontal());
		dirpanel.add(pad(10), gbc().pos(x++,1));
		dirpanel.add(button("...", e -> dir()), gbc().pos(x++,1));
		
		JPanel butpanel = xpanel(button("Convert", e -> convert()), button("Close", e -> close()));
		
		int y = 0;
		JPanel toppanel = new JPanel(new GridBagLayout());
		toppanel.add(areaScroller, gbc().pos(1,y++).size(2,1).weightBoth().fillBoth().insets(5));
		toppanel.add(label("Format"), gbc().pos(1, y).anchorEast().insets(5));
		toppanel.add(formatCombo, gbc().pos(2, y++).anchorWest().insets(5));
		toppanel.add(label("Rate"), gbc().pos(1, y).anchorEast().insets(5));
		toppanel.add(rateCombo, gbc().pos(2, y++).anchorWest().insets(5));
		toppanel.add(mergeBox, gbc().pos(2, y++).anchorWest().insets(5));
		toppanel.add(label("Output Dir"), gbc().pos(1, y).anchorEast().insets(5));
		toppanel.add(dirpanel, gbc().pos(2, y++).weightX().anchorWest().fillHorizontal().insets(5));
		toppanel.add(butpanel, gbc().pos(1, y++).size(2, 1).insets(5));
		

		loadPrefs();
		setPreferredSize(new Dimension(480,320));
		setContentPane(toppanel);
		pack();
	}
	
	private void updaterates () {
		String format = (String) formatCombo.getSelectedItem();
		rateCombo.setModel(new DefaultComboBoxModel<>(new Vector<>(engine.convertRates(format))));
	}

	public void init (Engine p) {
		this.engine = p;
		formatCombo.setModel(new DefaultComboBoxModel<>(new Vector<>(p.convertFormats())));
		updaterates();
	}
	
	private void close () {
		setVisible(false);
	}
	
	private List<File> files () {
		List<File> files = new ArrayList<>();
		for (String l : area.getText().split("\n")) {
			if ((l = l.trim()).length() > 0) {
				files.add(new File(dir, l));
			}
		}
		return files;
	}

	private void convert () {
		// TODO
		// get source files
		// no merge - convert straight to target format
		// merge - convert to aiff, merge, convert to target
		String format = (String) formatCombo.getSelectedItem();
		String ext = engine.convertExt(format);
		String rate = (String) rateCombo.getSelectedItem();
		boolean merge = mergeBox.isSelected();
		List<File> files = files();
		for (File f : files) {
			if (!f.isFile()) {
				JOptionPane.showMessageDialog(this, "Could not find input file " + f.getName(), "Convert", JOptionPane.ERROR_MESSAGE);
				return;
			}
		}
		if (files.size() == 0) {
			JOptionPane.showMessageDialog(this, "No input files", "Convert", JOptionPane.ERROR_MESSAGE);
			return;
		}
		JFileChooser fc = new JFileChooser();
		fc.setFileFilter(new FileFilter() {
			@Override
			public String getDescription () {
				return ext;
			}
			@Override
			public boolean accept (File f) {
				return f.getName().toLowerCase().endsWith(ext);
			}
		});
		fc.setFileSelectionMode(merge && files.size() > 0 ? JFileChooser.DIRECTORIES_ONLY : JFileChooser.FILES_ONLY);
		if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			if (merge && files.size() > 0) {
				// TODO
			} else {
				engine.convert(format, rate, file, files.get(0));
			}
		}
		
	}

	private void loadPrefs() {
		dirField.setText(PlayFrame.PREFS.get("afcdir", System.getProperty("user.home")));
		mergeBox.setSelected(PlayFrame.PREFS.getBoolean("afcmerge", false));
		rateCombo.setSelectedItem(Integer.valueOf(PlayFrame.PREFS.getInt("afcrate", 128)));
	}
	
	private void savePrefs() {
		PlayFrame.PREFS.put("afcdir", dirField.getText());
		PlayFrame.PREFS.putBoolean("afcmerge", mergeBox.isSelected());
		PlayFrame.PREFS.putInt("afcrate", ((Number)rateCombo.getSelectedItem()).intValue());
	}

	private void dir () {
		JFileChooser fc = new JFileChooser();
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		File dir = new File(dirField.getText());
		if (dir.isDirectory()) {
			fc.setCurrentDirectory(dir);
		}
		if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			dirField.setText(file.getAbsolutePath());
			savePrefs();
		}
	}

	public void setFiles (File dir, List<File> files) {
		this.dir = dir;
		StringBuilder sb = new StringBuilder();
		String dirpath = dir.getAbsolutePath();
		for (File f : files) {
			sb.append(f.getAbsolutePath().substring(dirpath.length() + 1)).append("\n");
		}
		area.setText(sb.toString());
		area.setCaretPosition(0);
	}
	
}
